@charset:gbk
输入输出流 执行 设置精度（64）
函数 第一步（n）
    变量 得分=0
    遍历 i 在 范围（1，n+1）
        变量 用时=运行时的时间（）
        变量 fc=0
        循环
            fc++
        直到 运行时的时间（）-用时 大于等于 1000
        得分=得分+fc
    终
    返回 转整数（得分/n）
终
函数 第二步（n，k）
    变量 精度=10^（-n）
    函数 递归（func， begin， end）
        变量 sum=0
        迭代 x=begin， x<=end， x=x+精度 则 sum+=func（x）*精度
        返回 sum
    终
    函数 f（x）
        返回 数学的sqrt（1-x^2）
    终
    变量 得分=0
    遍历 i 在 范围（1，k+1）
        变量 用时=运行时的时间（）
        递归（f，0，1）
        得分=得分+运行时的时间（）-用时
    终
    返回 转整数（得分/k）
终
函数 快速排序（a，m，n）
    若 n 小于等于 m
        返回 0
    终
    变量 （i，j，v）={m-1，n，a【n】}
    循环
        循环
            ++i
            若 i 大于等于 a的大小（）
                跳出
            终
        直到 a【i】 大于等于 v
        循环
            --j
            若 j 小于 0
                跳出
            终
        直到 a【j】 小于等于 v
        若 i 大于等于 j
            跳出
        终
        交换（a【i】，a【j】）
    终
    交换（a【i】，a【n】）
    快速排序（a，m，j）
    快速排序（a，i+1，n）
终
函数 第三步（n，k）
    变量 得分=0
    遍历 i 在 范围（1，k+1）
        变量 a={}
        迭代 i=0，i<=n，++i 则 a 执行 插入后面（数学的randint（0，n））
        变量 用时=运行时的时间（）
        快速排序（a， 0， a的大小（）-1）
        得分=得分+运行时的时间（）-用时
    终
    返回 转整数（得分/k）
终
函数 斐波那契（计数）
    变量 fib={0，1}
    迭代 n=2，n 小于等于 计数，++n 则 fib 执行 插入后面（fib 执行 访问（n-1）+fib 执行 访问（n-2））
    变量 sum=新建 哈希表
    迭代 i=2，i 小于 fib的大小（），++i 则 ++sum【转文字（fib 执行 访问（i）/fib 执行 访问（i-1））】
    变量 最大值=0：0
    遍历 it 在 sum 则 it的乙（） 大于 最大值的乙（）?（最大值=it）：空
    返回 最大值的甲（）
终
函数 第四步（n，k）
    变量 得分=0
    遍历 i 在 范围（1，k+1）
        变量 用时=运行时的时间（）
        斐波那契（n）
        得分=得分+运行时的时间（）-用时
    终
    返回 转整数（得分/k）
终
函数 第五步（n，k）
    变量 得分=0， fib=【】（n）→ n 大于 2 ? fib（n-1）+fib（n-2）：1
    遍历 i 在 范围（1，k+1）
        变量 用时=运行时的时间（）
        fib（n）
        得分+=运行时的时间（）-用时
    终
    返回 转整数（得分/k）
终
系统的输出 执行 输出一行（"Covariant Script 性能测试套件"）
系统的输出 执行 输出一行（"第一步：顺序执行性能"）
系统的输出 执行 输出一行（"结果："+转文字（第一步（5）））
系统的输出 执行 输出一行（"第二步：积分计算性能"）
系统的输出 执行 输出一行（"结果："+转文字（第二步（5，5）））
系统的输出 执行 输出一行（"第三步：快速排序算法（10000 Data）"）
系统的输出 执行 输出一行（"结果："+转文字（第三步（10000，5）））
系统的输出 执行 输出一行（"第四步：顺序斐波那契（10000 Data）"）
系统的输出 执行 输出一行（"结果："+转文字（第四步（10000，5）））
系统的输出 执行 输出一行（"第五步：递归斐波那契（Depth 30）"）
系统的输出 执行 输出一行（"结果："+转文字（第五步（30，5）））